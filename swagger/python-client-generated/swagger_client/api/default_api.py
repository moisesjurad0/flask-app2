# coding: utf-8

"""
    API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_persona_resource(self, dni, **kwargs):  # noqa: E501
        """Eliminar una persona por DNI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persona_resource(dni, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dni: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_persona_resource_with_http_info(dni, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_persona_resource_with_http_info(dni, **kwargs)  # noqa: E501
            return data

    def delete_persona_resource_with_http_info(self, dni, **kwargs):  # noqa: E501
        """Eliminar una persona por DNI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_persona_resource_with_http_info(dni, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dni: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dni']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_persona_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dni' is set
        if self.api_client.client_side_validation and ('dni' not in params or
                                                       params['dni'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dni` when calling `delete_persona_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dni' in params:
            path_params['dni'] = params['dni']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/personas/{dni}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_persona_resource(self, dni, **kwargs):  # noqa: E501
        """Obtener los detalles de una persona por DNI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persona_resource(dni, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dni: (required)
        :param str x_fields: An optional fields mask
        :return: Persona
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_persona_resource_with_http_info(dni, **kwargs)  # noqa: E501
        else:
            (data) = self.get_persona_resource_with_http_info(dni, **kwargs)  # noqa: E501
            return data

    def get_persona_resource_with_http_info(self, dni, **kwargs):  # noqa: E501
        """Obtener los detalles de una persona por DNI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_persona_resource_with_http_info(dni, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dni: (required)
        :param str x_fields: An optional fields mask
        :return: Persona
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dni', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_persona_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dni' is set
        if self.api_client.client_side_validation and ('dni' not in params or
                                                       params['dni'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dni` when calling `get_persona_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dni' in params:
            path_params['dni'] = params['dni']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/personas/{dni}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Persona',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_personas_resource(self, **kwargs):  # noqa: E501
        """Obtener la lista de todas las personas  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_personas_resource(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_fields: An optional fields mask
        :return: list[Persona]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_personas_resource_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_personas_resource_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_personas_resource_with_http_info(self, **kwargs):  # noqa: E501
        """Obtener la lista de todas las personas  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_personas_resource_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_fields: An optional fields mask
        :return: list[Persona]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_personas_resource" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/personas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Persona]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_personas_resource(self, payload, **kwargs):  # noqa: E501
        """Crear una nueva persona  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_personas_resource(payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Persona payload: (required)
        :param str x_fields: An optional fields mask
        :return: Persona
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_personas_resource_with_http_info(payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_personas_resource_with_http_info(payload, **kwargs)  # noqa: E501
            return data

    def post_personas_resource_with_http_info(self, payload, **kwargs):  # noqa: E501
        """Crear una nueva persona  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_personas_resource_with_http_info(payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Persona payload: (required)
        :param str x_fields: An optional fields mask
        :return: Persona
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_personas_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `post_personas_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/personas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Persona',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_persona_resource(self, dni, payload, **kwargs):  # noqa: E501
        """Actualizar los detalles de una persona por DNI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_persona_resource(dni, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dni: (required)
        :param Persona payload: (required)
        :param str x_fields: An optional fields mask
        :return: Persona
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_persona_resource_with_http_info(dni, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.put_persona_resource_with_http_info(dni, payload, **kwargs)  # noqa: E501
            return data

    def put_persona_resource_with_http_info(self, dni, payload, **kwargs):  # noqa: E501
        """Actualizar los detalles de una persona por DNI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_persona_resource_with_http_info(dni, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dni: (required)
        :param Persona payload: (required)
        :param str x_fields: An optional fields mask
        :return: Persona
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dni', 'payload', 'x_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_persona_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dni' is set
        if self.api_client.client_side_validation and ('dni' not in params or
                                                       params['dni'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dni` when calling `put_persona_resource`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `put_persona_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dni' in params:
            path_params['dni'] = params['dni']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fields' in params:
            header_params['X-Fields'] = params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/personas/{dni}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Persona',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
